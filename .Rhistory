devtools::install_github('PheWAS/PheWAS')
library(devtools)
library(devtools)
library('devtools')
packrat::install_github('PheWAS/PheWAS')
packrat::install_github('PheWAS/PheWAS')
packrat::install(curl)
packrat::install('curl')
packrat::set_opts(external.packages = "")
packrat::disable()
library(RadPheWAS)
hello()
generateExample()
# Hello, world!
#
# This is an example function named 'hello'
# which prints 'Hello, world!'.
#
# You can learn more about package authoring with RStudio at:
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Build and Reload Package:  'Cmd + Shift + B'
#   Check Package:             'Cmd + Shift + E'
#   Test Package:              'Cmd + Shift + T'
hello <- function() {
print("Hello, world!")
}
gen_ex <- function() {
generateExample(n=50)
}
generateExample()
source('~/RadPheWAS/R/hello.R')
gen_ex()
library(RadPheWAS)
gen_ex()
library(RadPheWAS)
library(RadPheWAS)
gen_ex()
hello()
source('~/RadPheWAS/R/hello.R')
library(RadPheWAS)
hello()
source('~/RadPheWAS/R/hello.R')
hello()
hello(n=50)
source('~/RadPheWAS/R/hello.R')
hello("poo")
hello(59)
hello()
source('~/RadPheWAS/R/hello.R')
hello("poo")
hello(50)
generateExample()
generateExample(10,5,"427.8")
generate_example()
source('~/RadPheWAS/R/genex.R')
generate_example()
source('~/RadPheWAS/R/genex.R')
generate_example()
source('~/RadPheWAS/R/genex.R')
generate_example()
generate_example(number_of_patients=5, phenotypes_per_patient=3, code_to_enhance='335')
View(gen_ex)
View(generate_example)
generateExample(n=5, phenotypes.per=3, hit='335')
source('~/RadPheWAS/R/genex.R')
source('~/RadPheWAS/R/createtable.R')
source('~/RadPheWAS/R/genex.R')
packrat::disable()
example(RadPheWAS)
example(hello)
library(RadPheWAS)
example(RadPheWAS)
example(RadPheWAS-package)
library(RadPheWAS)
example(RadPheWAS)
library(RadPheWAS)
example(RadPheWAS)
library(RadPheWAS)
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
print(slice(ex$id.icd9.count,1:10))
ex_function()
print(slice(ex$genotypes,1:10))
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/phewas.R')
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
#print(slice(results, 1:10))
source('~/RadPheWAS/R/example.R')
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex=generate_example(number_of_patients=2500, phenotypes_per_patient=10, code_to_enhance='335')
#print(slice(ex$genotypes,1:10))
#Extract the two parts from the returned list
id.icd9.count=ex$id.icd9.count
genotypes=ex$genotypes
#Create the PheWAS code table- translates the icd9s, adds
#exclusions, and reshapes to a wide format
phenotypes=create_phewas_table(id.icd9.count)
#Run the PheWAS
results=phewas_with_bonferroni(phenotypes,genotypes)
#print(slice(results, 1:10))
#print(results[order(results$p)[1:10],])
#Plot the results
phewasManhattan(results, annotate.angle=0, title="My Example PheWAS Manhattan Plot")
#Add PheWAS descriptions
results_d=addPhewasDescription(results)
#List the significant results
results_d[results_d$bonferroni&!is.na(results_d$p),]
#List the top 10 results
results_d[order(results_d$p)[1:10],]
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/phewas_manhattan.R')
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
ex_function()
source('~/RadPheWAS/R/example.R')
source('~/RadPheWAS/R/phewas.R')
source('~/RadPheWAS/R/phewas.R')
source('~/RadPheWAS/R/example.R')
ex_function()
library(RadPheWAS)
data <- read.table('topgenes.txt',sep='\t',row.names=1)
dat <- t(data)
dat$size <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
data <- read.table('topgenes.txt',sep='\t',row.names=1)
dat <- t(as.matrix(data))
dat$size <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
data <- read.table('topgenes.txt',sep='\t',row.names=1)
dat <- t(as.matrix(data))
dat$size <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
data <- read.table('topgenes',sep='\t',row.names=1)
dat <- t(as.matrix(data))
dat$size <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
data <- read.table('/Users/Emily/Desktop/Topics in Bioinformatics/Week 2/topgenes.txt',sep='\t',row.names=1)
dat <- t(as.matrix(data))
dat$size <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
dat[1:10,]
data <- read.table('/Users/Emily/Desktop/Topics in Bioinformatics/Week 2/topgenes.txt',sep='\t',row.names=1)
dat <- t(as.matrix(data))
dat[1,10:]
dat[1:10,]
dim(dat)
dat[,21] <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
dat$size <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
dim(dat)
dat <- t(as.matrix(data))
dat["Labels"] <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
dim(dat)
vec <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
dim(vec)
dat[,"Labels"] <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
length(vec)
dat["Labels"] <- t(vec)
dat[,"Labels"] <- t(vec)
data <- read.table('/Users/Emily/Desktop/Topics in Bioinformatics/Week 2/topgenes.txt',sep='\t',row.names=1)
dat <- t(as.matrix(data))
dat["Labels"] <- t(vec)
dim(dat)
dat <- t(as.matrix(data))
dim(dat)
cbind(dat, vec)
glm.model<-glmnet(dat[,1:20],dat$vec,family='binomial')
library(glmnet)
install.packages('glmnet')
library(glmnet)
glm.model<-glmnet(dat[,1:20],dat$vec,family='binomial')
glm.model<-glmnet(dat[,1:20],vec,family='binomial')
glm.model<-glmnet(dat[,1:20],as.factor(vec),family='binomial')
coef(glmmod)
coef(glm.model)
library(glmnet)
data <- read.table('/Users/Emily/Desktop/Topics in Bioinformatics/Week 2/topgenes.txt',sep='\t',row.names=1)
dat <- t(as.matrix(data))
vec <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
#cbind(dat, vec)
data <- read.table('/Users/Emily/Desktop/Topics in Bioinformatics/Week 2/topgenes.txt',sep='\t',row.names=1)
dat <- t(as.matrix(data))
vec <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
#cbind(dat, vec)
glm.model<-glm(dat,as.factor(vec),family=binomial(link='logit'))
summary(glm.model)
glm.model<-glm(x=dat,y=as.factor(vec),family=binomial(link='logit'))
summary(glm.model)
glm.model<-glm(dat~vec,family=binomial(link='logit'))
summary(glm.model)
dat <- t(as.matrix(data))
vec <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
#cbind(dat, vec)
glm.model<-glm(vec~dat,family=binomial(link='logit'))
summary(glm.model)
predict(glm.model)
predict(glm.model,type="response")
cv.glm(data, glm.model)
library(cv)
install.packages(cv)
install.packages('cv)
;
a;kdh
afl:
.
,
''
'
install.packages('cv')
install.packages('boot')
library(boot)
cv.glm(cbind(dat,vec),glm.model)
cv.glm(as.data.frame(cbind(dat,vec)),glm.model)
vec[1:3]
glm.model<-glm(trainvec~traindat,family=binomial(link='logit'))
testdata <- dat[20:30,]
traindata <- rbind(dat[1:19,],dat[31:38,])
testvec <- vec[20:30]
trainvec <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0)
glm.model<-glm(trainvec~traindat,family=binomial(link='logit'))
glm.model<-glm(trainvec~traindata,family=binomial(link='logit'))
summary(glm.model)
predict(glm.model,newdata=testdata,type="response")
predict(glm.model,newdata=as.data.frame(testdata),type="response")
pred.results <- ifelse(pred>0.0,1,0)
pred <- predict(glm.model,newdata=as.data.frame(testdata),type="response")
pred.results <- ifelse(pred>0.0,1,0)
pred.results
trainfull <- cbind(traindata,trainvec)
glm.model<-glm(trainvec~.,family=binomial(link='logit'),data=trainfull)
glm.model<-glm(trainvec~.,family=binomial(link='logit'),data=as.data.frame(trainfull)
glm.model<-glm(trainvec~.,family=binomial(link='logit'),data=as.data.frame(trainfull))
glm.model<-glm(trainvec~.,family=binomial(link='logit'),data=as.data.frame(trainfull))
summary(glm.model)
pred <- predict(glm.model,newdata=as.data.frame(testdata),type="response")
pred.results <- ifelse(pred>0.0,1,0)
pred.results
pred
pred.results <- ifelse(pred>0.5,1,0)
pred.results
pred.results <- ifelse(pred>0.9,1,0)
pred.results
testdata <- dat[20:31,]
traindata <- rbind(dat[1:19,],dat[32:38,])
testvec <- vec[20:31]
trainvec <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0)
trainfull <- cbind(traindata,trainvec)
glm.model<-glm(trainvec~.,family=binomial(link='logit'),data=as.data.frame(trainfull))
summary(glm.model)
pred <- predict(glm.model,newdata=as.data.frame(testdata),type="response")
pred.results <- ifelse(pred>0.9,1,0)
pred.results
testvec
col.names
colnames
colnames(dat)
row.names(dat)
pred.results <- ifelse(pred>0.5,1,0)
pred.results
library(pROC)
install.packages('pROC')
library(pROC)
testfull <- cbind(testdata,testvec)
plot(roc(testvec~.,data=as.data.frame(testfull)))
plot(roc(testvec~pred,data=as.data.frame(testfull)))
plot(roc(testvec~pred,data=as.data.frame(testdata)))
summary(glm.model)
library(ROCR)
perf <- performance(pred, "tpr", "fpr")
plot(perf, main='ROC Curve for SVM Classifier')
auc.perf <- performance(pred, measure="auc")
auc <- auc.perf@y.values
pred <- prediction(glm.model,newdata=as.data.frame(testdata),type="response")
pred <- predict(glm.model,newdata=as.data.frame(testdata))
glm.pred <- predict(glm.model,newdata=as.data.frame(testdata))
pred <- prediction(glm.pred, testvec)
perf <- performance(pred, "tpr", "fpr")
plot(perf, main='ROC Curve for GLM Classifier')
auc.perf <- performance(pred, measure="auc")
auc <- auc.perf@y.values
auc
library(glmnet)
library(boot)
data <- read.table('/Users/Emily/Desktop/Topics in Bioinformatics/Week 2/topgenes.txt',sep='\t',row.names=1)
dat <- t(as.matrix(data))
vec <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
#cbind(dat, vec)
testdata <- dat[20:31,]
traindata <- rbind(dat[1:19,],dat[32:38,])
testvec <- vec[20:31]
trainvec <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0)
trainfull <- cbind(traindata,trainvec)
testfull <- cbind(testdata,testvec)
glm.model<-glm(trainvec~.,family=binomial(link='logit'),data=as.data.frame(trainfull))
summary(glm.model)
glm.pred <- predict(glm.model,newdata=as.data.frame(testdata))
pred.results <- ifelse(glm.pred>0.5,1,0)
pred.results
